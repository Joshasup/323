import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

//DONE
public class MaxHeap 
{
	public static void main(String[]args)
	{
		ArrayList<Integer> a = new ArrayList<Integer>();
		
		Random rng = new Random();
		Scanner in = new Scanner(System.in);
		final int REPS = 1;
		System.out.println("Enter the size of the array.");
		int n = in.nextInt();
		
		for(int i = 0; i < n; i++)
		{
			a.add(rng.nextInt(20001)-10000);
		}
		
		selectionSort(a);
		
		int timeSum = 0;
		for(int i = 0; i < REPS; i++) //run REPS amt of times
		{
			a = makeArray(n);
			long start = System.nanoTime();
			heapSort(a);
			//System.out.println("a after heap sort. \n" + a);
			long end = System.nanoTime();
			long time = end - start;
			timeSum += time;
			
			for(int j = 0; j < n; j++) //make another array
			{
				a.add(rng.nextInt(20001)-10000);
			} //I believe this will run one time more than necessary
				//this is part is NOT included in time
			 
				 
		}
		//System.out.println(a);
		//System.out.println("Average time is: " +timeSum/REPS + " nanoseconds");
		System.out.println("Average time of heapSort after " 
		+ REPS + " reps is: " + timeSum/REPS + " nanoseconds.");
		
		long quickSum = 0;
		for(int i = 0; i < REPS; i++)
		{
			a = makeArray(n); //remake array so ensure quality
			long quickStart = System.nanoTime();
			quickSort(a, 0, a.size() - 1); //I think a.size() - 1 = n
			long quickEnd = System.nanoTime();
			quickSum = quickSum + (quickEnd - quickStart);
		}
		System.out.println("Average time of quickSort after " 
		+ REPS + " reps is: " + quickSum/REPS + " nanoseconds.");
		
		long insertSum = 0;
		for(int i = 0; i < REPS; i++)
		{
			a = makeArray(n); //remake array so ensure quality
			long insertStart = System.nanoTime();
			selectionSort(a); //I think a.size() - 1 = n
			//System.out.println("a after selection sort.\n" + a);
			long insertEnd = System.nanoTime();
			insertSum = insertSum + (insertEnd - insertStart);
		}
		System.out.println("Average time of selectionSort after " 
		+ REPS + " reps is: " + insertSum/REPS + " nanoseconds.");
		
	}

	//public static ArrayList<Integer> heapSort(ArrayList<Integer> a)
	/**
	 * sorts an arrayList a using heap sort
	 * @param a - the array to be sorted
	 */
	public static void heapSort(ArrayList<Integer> a)
	{
		//System.out.println("HeapSort's a: " + a);
		ArrayList<Integer> sorted = new ArrayList<Integer>();
		int n = a.size();
		for(int i = n/2 - 1; i >= 0; i--) //heapify array
		//leaves already max heapified so we skip and start n/2
		{
			maxHeapify(a, i, n);
		}
		//System.out.println("Heapified: " + a);
		
		for(int i = n-1; i >= 0; i--) //make sorted array by popping
		{
			int temp = a.get(0); //swap root and leaf
			a.set(0, a.get(i));
			a.set(i, temp);
			sorted.add(a.remove(i)); //pop highest value
			maxHeapify(a, 0, i); //fix max heap
		}
		System.out.println("a after heap sort" + sorted);
		
		//return sorted;
	}
	
	/**
	 * max heapifys the arrayList a
	 * @param a - the arrayList
	 * @param current - the current index
	 * @param size - the size of the array
	 */
	public static void maxHeapify(ArrayList<Integer> a, int current, int size)
	{
		int left = 2*current + 1; //left child index
		int right = (2*current) + 2; //right child index
		int max = current; //max index starts as current
		
		if(size > left && a.get(left) > a.get(current)) //checks if index exists && >
		{
			max = left; //store left index as max index
		}
		
		if(size > right && a.get(right) > a.get(max))
		{
			max = right; //store right index as max index
		}
		
		if(max != current) //max was changed
		{
			//swap max with current
			int temp = a.get(current);
			a.set(current, a.get(max));
			a.set(max, temp);
			maxHeapify(a, max, size); //look at children of swapped
		}
	}
	
	/**
	 * quick sorts an array
	 * @param a - the array to be sored
	 * @param start - the first index
	 * @param end - the last index
	 */
	public static void quickSort(ArrayList<Integer> a, int start, int end)
	{
		 if (start < end) 
	        {
	            // pi is partitioning index, arr[pi] is now at right place 
	            int pivotIndex = partition(a, start, end);
	            quickSort(a, start, pivotIndex - 1);
	            quickSort(a, pivotIndex + 1, end);
	        }
	}
	
	/**
	 * gets the index of pivot in quick sort
	 * @param a - the array
	 * @param start - starting index
	 * @param end - ending index
	 * @return - index of pivot
	 */
	public static int partition(ArrayList<Integer> a, int start, int end)
	{

		int i = start; //latest index that is less than pivot
		//int size = end - start + 1;//start;
		int pivot = a.get(end); // median of 3 or last element
		//if i choose med of 3, then pivot will be be swapped with last element
		for(int j = start; j < end; j++) // size - 1 so i deal with pivot myself
		{
			if(a.get(j) < pivot)
			{
				//i++;
				//swap i and j
				int temp = a.get(j);
				a.set(j, a.get(i));
				a.set(i, temp);
				//iterate i
				i++;
			}
		}
		
		//one last swap to put pivot in its place
		int temp = a.get(end);
		a.set(end, a.get(i));
		a.set(i, temp);
		//at this point you should have partitioned array
	//	System.out.println("a: " +a);
	//	System.out.println("i: " + i);
		return i; //index of pivot is i
	}
	
	/**
	 * sorts an array using selection sort
	 * @param a - the array to be sorted
	 */
	public static void selectionSort(ArrayList<Integer> a)
	{
		int size = a.size();
		int temp;
		int smallestIndex;
		for(int i = 0; i < size; i++ )
		{
			smallestIndex = i;
			for(int j = i + 1; j < size; j++)
			{
				if(a.get(smallestIndex) > a.get(j)) //keep track on index
				{
					smallestIndex = j;
				}
			}
			//swap lowest value with ith position
			temp = a.get(smallestIndex);
			a.set(smallestIndex, a.get(i));
			a.set(i, temp);
		}
		
	}
	/**
	 * makes an array
	 * @param n - the size of the array
	 * @return - the new array
	 */
	public static ArrayList<Integer> makeArray(int n)
	{
		ArrayList a = new ArrayList<Integer>();
		Random rng = new Random();
		for(int i=0; i<n; i++)
		{
			a.add(rng.nextInt(14001) - 7000);
		}
		return a;
	}
}
