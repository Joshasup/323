import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Scanner;
public class kthLeastElement {
	//DONE
	public static void main (String[]args)
	{
		Random rng = new Random();
		Scanner in = new Scanner(System.in);
		ArrayList<Integer> a = new ArrayList<Integer>();
		System.out.println("Enter the size of the array.");
		int n = in.nextInt();
		
		for(int i = 0; i < n; i++)
		{
			a.add(rng.nextInt(201)-100);
			//a.add(i);
		}
		
		System.out.println("What kth least element do you want?");
		int k = in.nextInt();
		//note you have 0 - size-1 least elements
		System.out.println("Original array: " + a);
		System.out.println("Kth least element: " + findKth(a, k, 0, n-1));
		Collections.sort(a);
		System.out.println("Sorted Array for convenience: " + a);
		
		/*
		System.out.println(a);
		a = quickSort(a, 0, a.size()-1);
		System.out.println(a);
		*/
		
	}
	
	/**
	 * finds the kth least value
	 * @param a - the array to search
	 * @param k - the kth least number to find 
	 * @param start - the start of the array
	 * @param end - the end of the array
	 * @return - the found integer
	 */
	public static int findKth(ArrayList<Integer> a, int k, int start, int end)
	{
		//System.out.println("Start: " + start + " End: " + end);
		int pivIndex = partition(a, start, end);
		//System.out.println("pivIndex " + pivIndex);
		
		if(pivIndex > k)
		{
			//System.out.println("piv > k");
			return findKth(a, k, start, pivIndex - 1);
		}
		
		else if(pivIndex < k)
		{
			//System.out.println("piv < k");
			return findKth(a, k, pivIndex + 1, end);
		}
		
		//pivIndex == k
		return a.get(pivIndex);
	}
	
	/**
	 * partitions the array with a pivot value
	 * @param a - the array to sort
	 * @param start - the start of the array
	 * @param end - the end of the array
	 * @return - the index of pivot
	 */
	public static int partition(ArrayList<Integer> a, int start, int end)
	{

		int i = start; //latest index that is less than pivot
		//int size = end - start + 1;//start;
		int pivot = a.get(end); // median of 3 or last element
		//if i choose med of 3, then pivot will be be swapped with last element
		for(int j = start; j < end; j++) // size - 1 so i deal with pivot myself
		{
			if(a.get(j) < pivot)
			{
				//i++;
				//swap i and j
				int temp = a.get(j);
				a.set(j, a.get(i));
				a.set(i, temp);
				//iterate i
				i++;
			}
		}
		
		//maybe one last swap to put pivot in its place
		int temp = a.get(end);
		a.set(end, a.get(i));
		a.set(i, temp);
		//at this point you should have partitioned array
	//	System.out.println("a: " +a);
	//	System.out.println("i: " + i);
		return i; //index of pivot is i
	}
}
